class Solution {
    public int[][] merge(int[][] intervals) {
        sort(intervals,0,intervals.length-1);
        int indx = 0;
        int flag = 0;
        for(int i=1;i<intervals.length;i++){
            int[] index = intervals[indx];
            int[] temp = intervals[i];      
            if(temp[0] <= index[1] && temp[1] >= index[0]){
                intervals[indx][0] =  Math.min(temp[0],index[0]);
                intervals[indx][1] =  Math.max(temp[1],index[1]); 
                flag++;
            }
            else{
                indx++;
                intervals[indx][0] = temp[0];
                intervals[indx][1] = temp[1];
                
            }
        }
        intervals = removeElements(intervals,flag);
        return intervals;
    }
    public int[][] removeElements(int[][] arr1,int flag) {
    	ArrayList<int[]> temp = new ArrayList<int[]>();
    	for(int[] i : arr1) {
    		temp.add(i);
    	}
    	for(int i = 1,itr = 0; itr < flag ; itr++) {
    		temp.remove(temp.size()-1);
    	}
    	int[][] arr = new int[temp.size()][2];
    	for(int i = 0 ; i < temp.size();i++) {
    		arr[i] = temp.get(i);
    	}
    	return arr;
    }
    public void sort(int[][] intervals,int low, int high){
        if(low < high){
            int pi = partition(intervals,low,high);
            sort(intervals,low,pi-1);
            sort(intervals,pi+1,high);
        }
    }
    public int partition(int[][] intervals,int low,int high){
        int pivot = intervals[high][0];
        int i = low-1;
        for(int j = low; j <high ; j++){
            if(intervals[j][0] <= pivot){
                i++;
                int[] temp = intervals[j];
                intervals[j] = intervals[i];
                intervals[i] = temp;
            }
        }
        int[] temp = intervals[i+1];
        intervals[i+1]= intervals[high];
        intervals[high] = temp;
        return i+1;
    }
}
